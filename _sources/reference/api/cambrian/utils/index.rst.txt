cambrian.utils
==============

.. py:module:: cambrian.utils

.. autoapi-nested-parse::

   This module defines the Cambrian utilities.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /reference/api/cambrian/utils/cambrian_xml/index
   /reference/api/cambrian/utils/config/index
   /reference/api/cambrian/utils/logger/index
   /reference/api/cambrian/utils/wrappers/index


Classes
-------

.. autoapisummary::

   cambrian.utils.MjCambrianActuator
   cambrian.utils.MjCambrianJoint
   cambrian.utils.MjCambrianGeometry


Functions
---------

.. autoapisummary::

   cambrian.utils.evaluate_policy
   cambrian.utils.save_data
   cambrian.utils.try_load_pickle
   cambrian.utils.generate_sequence_from_range
   cambrian.utils.setattrs_temporary
   cambrian.utils.make_odd
   cambrian.utils.safe_index
   cambrian.utils.get_body_id
   cambrian.utils.get_body_name
   cambrian.utils.get_geom_id
   cambrian.utils.get_geom_name
   cambrian.utils.get_site_id
   cambrian.utils.get_site_name
   cambrian.utils.get_joint_id
   cambrian.utils.get_joint_name
   cambrian.utils.get_camera_id
   cambrian.utils.get_camera_name
   cambrian.utils.get_light_id
   cambrian.utils.get_light_name
   cambrian.utils.get_sensor_id
   cambrian.utils.get_sensor_name
   cambrian.utils.agent_selected
   cambrian.utils.format_string_with_obj_attributes
   cambrian.utils.literal_eval_with_callables
   cambrian.utils.safe_eval


Package Contents
----------------

.. py:function:: evaluate_policy(env, model, num_runs, *, record_kwargs = None, step_callback = lambda: True, done_callback = lambda _: True)

   Evaluate a policy.

   :Parameters: * **env** (*gym.Env*) -- The environment to evaluate the policy on. Assumed to be a
                  VecEnv wrapper around a MjCambrianEnv.
                * **model** (*MjCambrianModel*) -- The model to evaluate.
                * **num_runs** (*int*) -- The number of runs to evaluate the policy on.

   :keyword record_kwargs: The keyword arguments to pass to the save
                           method of the environment. If None, the environment will not be recorded.
   :kwtype record_kwargs: Dict[str, Any]
   :keyword step_callback: The callback function to call at each step.
                           If the function returns False, the evaluation will stop.
   :kwtype step_callback: Callable[[], bool]
   :keyword done_callback: The callback function to call when a run
                           is done. If the function returns False, the evaluation will stop.
   :kwtype done_callback: Callable[[int], bool]


.. py:function:: save_data(data, outdir, pickle_file)

   Save the parsed data to a pickle file.


.. py:function:: try_load_pickle(folder, pickle_file)

   Try to load the data from the pickle file.


.. py:function:: generate_sequence_from_range(range, num, endpoint = True)

   Generate a sequence of numbers from a range. If num is 1, the average of the
   range is returned. Otherwise, a sequence of numbers is generated using np.linspace.

   :Parameters: * **range** (*Tuple[float, float]*) -- The range of the sequence.
                * **num** (*int*) -- The number of elements in the sequence.

   :keyword endpoint: Whether to include the endpoint in the sequence.
   :kwtype endpoint: bool


.. py:function:: setattrs_temporary(*args)

   Temporarily set attributes of an object.


.. py:function:: make_odd(num)

   Make a number odd by adding 1 if it is even. If `num` is a float, it is cast to
   an int.


.. py:function:: safe_index(arr, value, *, default = None)

   Safely get the index of a value in a list. If the value is not in the list, None
   is returned.


.. py:function:: get_body_id(model, body_name)

   Get the ID of a Mujoco body.


.. py:function:: get_body_name(model, bodyadr)

   Get the name of a Mujoco body.


.. py:function:: get_geom_id(model, geom_name)

   Get the ID of a Mujoco geometry.


.. py:function:: get_geom_name(model, geomadr)

   Get the name of a Mujoco geometry.


.. py:function:: get_site_id(model, site_name)

   Get the ID of a Mujoco geometry.


.. py:function:: get_site_name(model, siteadr)

   Get the name of a Mujoco geometry.


.. py:function:: get_joint_id(model, joint_name)

   Get the ID of a Mujoco geometry.


.. py:function:: get_joint_name(model, jointadr)

   Get the name of a Mujoco geometry.


.. py:function:: get_camera_id(model, camera_name)

   Get the ID of a Mujoco camera.


.. py:function:: get_camera_name(model, cameraadr)

   Get the name of a Mujoco camera.


.. py:function:: get_light_id(model, light_name)

   Get the ID of a Mujoco light.


.. py:function:: get_light_name(model, lightadr)

   Get the name of a Mujoco light.


.. py:function:: get_sensor_id(model, sensor_name)

   Get the ID of a Mujoco sensor.


.. py:function:: get_sensor_name(model, sensoradr)

   Get the name of a Mujoco sensor.


.. py:class:: MjCambrianActuator

   Helper class which stores information about a Mujoco actuator.

   :ivar adr: The Mujoco actuator ID (index into model.actuator_* arrays).
   :vartype adr: int
   :ivar trnadr: The index of the actuator's transmission in the model.
   :vartype trnadr: int
   :ivar low: The lower bound of the actuator's range.
   :vartype low: float
   :ivar high: The upper bound of the actuator's range.

   :vartype high: float


.. py:class:: MjCambrianJoint

   Helper class which stores information about a Mujoco joint.

   :ivar adr: The Mujoco joint ID (index into model.jnt_* arrays).
   :vartype adr: int
   :ivar qposadr: The index of the joint's position in the qpos array.
   :vartype qposadr: int
   :ivar numqpos: The number of positions in the joint.
   :vartype numqpos: int
   :ivar qveladr: The index of the joint's velocity in the qvel array.
   :vartype qveladr: int
   :ivar numqvel: The number of velocities in the joint.

   :vartype numqvel: int


   .. py:method:: create(model, jntadr)
      :staticmethod:


      Create a Joint object from a Mujoco model and joint body ID.



   .. py:property:: qposadrs
      :type: List[int]


      Get the indices of the joint's positions in the qpos array.


   .. py:property:: qveladrs
      :type: List[int]


      Get the indices of the joint's velocities in the qvel array.


.. py:class:: MjCambrianGeometry

   Helper class which stores information about a Mujoco geometry

   :ivar id: The Mujoco geometry ID (index into model.geom_* arrays).
   :vartype id: int
   :ivar rbound: The radius of the geometry's bounding sphere.
   :vartype rbound: float
   :ivar pos: The position of the geometry relative to the body.

   :vartype pos: np.ndarray


.. py:function:: agent_selected(agent, agents)

   Check if the agent is selected.


.. py:function:: format_string_with_obj_attributes(s, obj)

   Replaces placeholders in a string with attribute values from a provided object.

   Args:
   s (str): The string containing placeholders in the format {attr.path}.
   obj (object): The object from which to fetch the attribute values.

   Returns:
   str: The formatted string with attribute values.

   Examples:
   >>> class Env:
   ...     def __init__(self):
   ...         self.test = "working"
   ...
   >>> class CustomPythonClass:
   ...     def __init__(self):
   ...         self.env = Env()
   ...
   >>> obj = CustomPythonClass()
   >>> format_string_with_obj_attributes("Test: {env.test}", obj)
   'Test: working'


.. py:function:: literal_eval_with_callables(node_or_string, safe_callables = {}, safe_methods = {}, *, _env={})

   Safely evaluate an expression node or a string containing a Python expression.
   The expression can contain literals, lists, tuples, dicts, unary and binary
   operators. Calls to functions specified in 'safe_callables' dictionary are allowed.

   This function is designed to evaluate expressions in a controlled environment,
   preventing the execution of arbitrary code. It parses the input into an
   Abstract Syntax Tree (AST) and recursively evaluates each node, only allowing
   operations and function calls that are explicitly permitted.

   :Parameters: * **node_or_string** (*Union[ast.AST, str]*) -- The expression node or string to evaluate.
                * **safe_callables** (*Dict[str, Callable]*) -- A dictionary mapping function names to
                  callable Python objects. Only these functions can be called within the
                  expression.
                * **safe_methods** (*Dict[Tuple[type, str], Callable]*) -- A dictionary mapping
                  (type, method_name) to callable methods. Only these methods can be called
                  on objects within the expression.
                * **_env** (*Dict*) -- Internal parameter for variable and function environment.
                  Should not be set manually.

   :returns: *Any* -- The result of the evaluated expression.

   :raises ValueError: If the expression contains unsupported or malformed nodes or tries
       to execute unsupported operations.

   .. rubric:: Examples

   >>> literal_eval_with_callables("1 + 2")
   3
   >>> literal_eval_with_callables("sqrt(4)", {'sqrt': math.sqrt})
   2.0


.. py:function:: safe_eval(src, additional_vars = {})

   Evaluate a string containing a Python expression in a safe manner.

   This function uses `literal_eval_with_callables` to evaluate the expression,
   only allowing certain built-in functions and types, and any additional variables
   provided. It prevents execution of arbitrary code or access to unauthorized
   functions and methods.

   :Parameters: * **src** (*Any*) -- The source code (string or AST node) to evaluate.
                * **additional_vars** (*Dict[str, Any]*) -- A dictionary of additional variables or
                  functions to include in the evaluation environment.

   :returns: *Any* -- The result of the evaluated expression.

   :raises ValueError: If the expression contains unsupported operations or cannot be
       evaluated.

   .. rubric:: Examples

   >>> safe_eval("1 + 2")
   3
   >>> safe_eval("max([1, 2, 3])")
   3
   >>> safe_eval("math.sqrt(16)", {'math': math})
   4.0


